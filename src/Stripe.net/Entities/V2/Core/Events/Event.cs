// File generated from our OpenAPI spec
namespace Stripe.V2.Core
{
    using System;
    using Newtonsoft.Json;

    /// <summary>
    /// Events are generated to keep you informed of activity in your business account. APIs in
    /// the /v2 namespace generate <a
    /// href="https://docs.stripe.com/event-destinations#benefits-of-thin-events">thin
    /// events</a> which have small, unversioned payloads that include a reference to the ID of
    /// the object that has changed. The Events v2 API returns these new thin events. <a
    /// href="https://docs.stripe.com/event-destinations#fetch-data">Retrieve the event
    /// object</a> for additional data about the event. Use the related object ID in the event
    /// payload to <a
    /// href="https://docs.stripe.com/event-destinations#retrieve-the-object-associated-with-thin-events">fetch
    /// the API resource</a> of the object associated with the event. Comparatively, events
    /// generated by most API v1 include a versioned snapshot of an API object in their payload.
    /// </summary>
    public class Event : StripeEntity<Event>, IHasId, IHasObject
    {
        /// <summary>
        /// Unique identifier for the event.
        /// </summary>
        [JsonProperty("id")]
        public string Id { get; set; }

        /// <summary>
        /// String representing the object's type. Objects of the same type share the same value of
        /// the object field.
        /// </summary>
        [JsonProperty("object")]
        public string Object { get; set; }

        /// <summary>
        /// Authentication context needed to fetch the event or related object.
        /// </summary>
        [JsonProperty("context")]
        public string Context { get; set; }

        /// <summary>
        /// Time at which the object was created.
        /// </summary>
        [JsonProperty("created")]
        public DateTime Created { get; set; } = Stripe.Infrastructure.DateTimeUtils.UnixEpoch;

        /// <summary>
        /// Has the value <c>true</c> if the object exists in live mode or the value <c>false</c> if
        /// the object exists in test mode.
        /// </summary>
        [JsonProperty("livemode")]
        public bool Livemode { get; set; }

        /// <summary>
        /// Reason for the event.
        /// </summary>
        [JsonProperty("reason")]
        public EventReason Reason { get; set; }

        /// <summary>
        /// The type of the event.
        /// </summary>
        [JsonProperty("type")]
        public string Type { get; set; }
    }
}
